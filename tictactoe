import math

# Function to print the Tic-Tac-Toe board
def print_board(board):
    print(f"{board[0]} | {board[1]} | {board[2]}")
    print("--+---+--")
    print(f"{board[3]} | {board[4]} | {board[5]}")
    print("--+---+--")
    print(f"{board[6]} | {board[7]} | {board[8]}")
    print()

# Function to check if the game has a winner
def check_winner(board, player):
    win_combinations = [
        [0, 1, 2], [3, 4, 5], [6, 7, 8],  # rows
        [0, 3, 6], [1, 4, 7], [2, 5, 8],  # columns
        [0, 4, 8], [2, 4, 6]              # diagonals
    ]
    for combo in win_combinations:
        if board[combo[0]] == board[combo[1]] == board[combo[2]] == player:
            return True
    return False

# Function to check if the board is full (draw)
def is_board_full(board):
    return all(isinstance(spot, str) for spot in board)

# Minimax algorithm to find the best move
def minimax(board, depth, is_maximizing):
    # Check if 'O' (computer) has won
    if check_winner(board, 'O'):
        return 10 - depth
    # Check if 'X' (human) has won
    if check_winner(board, 'X'):
        return depth - 10
    # Check for a draw
    if is_board_full(board):
        return 0

    if is_maximizing:
        best_score = -math.inf
        for i in range(9):
            if isinstance(board[i], int):  # Check if the spot is available
                board[i] = 'O'
                score = minimax(board, depth + 1, False)
                board[i] = i + 1  # Undo the move
                best_score = max(best_score, score)
        return best_score
    else:
        best_score = math.inf
        for i in range(9):
            if isinstance(board[i], int):  # Check if the spot is available
                board[i] = 'X'
                score = minimax(board, depth + 1, True)
                board[i] = i + 1  # Undo the move
                best_score = min(best_score, score)
        return best_score

# Function to find the best move for the computer
def find_best_move(board):
    best_score = -math.inf
    best_move = -1
    for i in range(9):
        if isinstance(board[i], int):  # Check if the spot is available
            board[i] = 'O'
            score = minimax(board, 0, False)
            board[i] = i + 1  # Undo the move
            if score > best_score:
                best_score = score
                best_move = i
    return best_move

# Function to play the Tic-Tac-Toe game
def play_game():
    board = [i + 1 for i in range(9)]  # Initialize the board with numbers 1-9
    print("Welcome to Tic-Tac-Toe! You are 'X' and the computer is 'O'.")
    print_board(board)

    while True:
        # Human's turn
        while True:
            try:
                move = int(input("Enter your move (1-9): ")) - 1
                if board[move] not in ['X', 'O']:
                    board[move] = 'X'
                    break
                else:
                    print("Spot already taken. Try again.")
            except (ValueError, IndexError):
                print("Invalid move. Try again.")

        print_board(board)

        # Check if human wins
        if check_winner(board, 'X'):
            print("Congratulations! You win!")
            break
        if is_board_full(board):
            print("It's a draw!")
            break

        # Computer's turn
        print("Computer's turn...")
        best_move = find_best_move(board)
        board[best_move] = 'O'
        print_board(board)

        # Check if computer wins
        if check_winner(board, 'O'):
            print("Computer wins! Better luck next time.")
            break
        if is_board_full(board):
            print("It's a draw!")
            break

# Start the game
play_game()
